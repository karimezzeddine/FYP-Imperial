//
//  DataProcessingManager.swift
//  TENNIS MOTION
//
//  Created by Mac on 6/1/22.
//
import Foundation


class DataProcessingManager: ObservableObject
{
    func standardDeviation(arr : [Float]) -> Float
    {
        let length = Float(arr.count)
        let avg = arr.reduce(0, {$0 + $1}) / length
        let sumOfSquaredAvgDiff = arr.map { pow($0 - avg, 2.0)}.reduce(0, {$0 + $1})
        return sqrt(sumOfSquaredAvgDiff / length)
    }

    func traps(arr : [Float]) -> Float{
        let b = arr.count
        let a = 0
        
        
        
        var zoids: [Float] = []
        var trapsum: Float
        for i in 0...(b-2){
            let traparea = ((Float(b)-Float(a))/Float(b)) * (0.5*(arr[i]+arr[i+1]))
            zoids.append(traparea)

        }
        trapsum = zoids.reduce(0,+)
        return trapsum
    }

    // PERFORMANCE PARAMETERS

    func RacketSpeed(arr1 : [Float],arr2 : [Float]) -> Float{ //function computing racket speed for ONE shot
        let max1 = Float((arr1.map(abs)).max()!)
        let max2 = Float((arr2.map(abs)).max()!)
        let omega = Float(sqrt(pow(Float(max1),Float(2)) + pow(Float(max2),Float(2))));
        let racket_speed = Float(omega * 0.7445 * 3.6)
//
//        var stroke_color = 0
//        if racket_speed < 20 {
//            stroke_color = 1
//        }
//        if (racket_speed < 30) && (racket_speed >= 20) {
//            stroke_color = 2
//        }
//        if (racket_speed < 40) && (racket_speed >= 30) {
//            stroke_color = 3
//        }
//        if (racket_speed >= 40) {
//            stroke_color = 4
//        }
            
//        return [racket_speed,Float(stroke_color)]
        return racket_speed
    }

    func ShotConsistency(arr1 : [Float],arr2 : [Float],arr3 : [Float],arr4 : [Float],arr5 : [Float],arr6 : [Float]) -> Float{ //function computing shot consistency for ONE shot
        // arrays arr11 to arr66 are the template shots gyro and acceleration which will be imported from matlab
        var consistency_gyro_X = [Float](repeating: 0, count: 120)
        var consistency_gyro_Y = [Float](repeating: 0, count: 120)
        var consistency_gyro_Z = [Float](repeating: 0, count: 120)
        
        var consistency_acc_X = [Float](repeating: 0, count: 120)
        var consistency_acc_Y = [Float](repeating: 0, count: 120)
        var consistency_acc_Z = [Float](repeating: 0, count: 120)
        
        
        //Initialize template shots
        let arr11 = [-0.660000, -0.580000, -0.440000, -0.400000, -0.360000, -0.250000, -0.080000, 0.110000, 0.190000, 0.220000, 0.120000, 0.190000, 0.290000, 0.230000, 0.290000, 0.290000, 0.210000, 0.310000, 0.320000, 0.160000, 0.130000, 0.100000, 0.030000, 0.000000, -0.120000, -0.240000, -0.180000, -0.120000, -0.280000, -0.390000, -0.370000, -0.530000, -0.780000, -0.720000, -0.630000, -0.520000, -0.760000, -0.980000, -0.850000, -0.500000, -0.580000, -0.850000, -1.190000, -1.200000, -1.530000, -1.890000, -2.250000, -2.610000, -3.240000, -3.740000, -4.380000, -4.940000, -4.730000, -5.090000, -5.320000, -5.050000, -4.840000, -2.920000, -0.530000, 3.270000, 8.390000, 6.250000, 4.190000, 3.370000, 4.390000, 7.890000, 12.300000, 16.670000, 16.600000, 10.940000, 7.030000, 2.180000, 0.280000, -1.240000, -0.550000, -1.280000, -1.970000, -2.190000, -2.620000, -2.850000, -2.840000, -2.720000, -3.270000, -3.400000, -3.450000, -3.440000, -3.490000, -3.630000, -3.610000, -3.460000, -3.140000, -2.850000, -2.730000, -2.620000, -2.580000, -2.330000, -2.430000, -2.410000, -2.310000, -2.060000, -1.910000, -1.860000, -1.530000, -1.350000, -1.110000, -0.980000, -1.000000, -0.940000, -1.050000, -1.260000, -1.410000, -1.430000, -1.440000, -1.390000, -1.390000, -1.320000, -1.160000, -1.030000, -0.420000, -0.330000]
        let arr22 = [0.760000, 0.760000, 0.840000, 0.910000, 1.010000, 1.110000, 1.180000, 1.180000, 1.260000, 1.410000, 1.480000, 1.640000, 1.830000, 2.150000, 2.300000, 2.400000, 2.610000, 2.630000, 2.670000, 2.670000, 2.650000, 2.610000, 2.640000, 2.650000, 2.570000, 2.510000, 2.420000, 2.180000, 1.990000, 1.970000, 1.820000, 1.700000, 1.500000, 1.240000, 1.120000, 0.980000, 0.960000, 0.940000, 0.880000, 0.710000, 0.500000, 0.380000, 0.210000, 0.050000, -0.130000, -0.340000, -0.560000, -0.810000, -1.120000, -1.470000, -1.740000, -1.960000, -2.330000, -2.790000, -3.660000, -5.650000, -8.180000, -9.420000, -11.170000, -12.850000, -13.200000, -15.280000, -15.800000, -15.820000, -15.300000, -14.480000, -12.480000, -8.970000, -3.500000, 0.780000, 1.950000, 3.300000, 1.650000, 0.510000, 0.990000, 0.370000, 0.240000, -0.280000, -0.300000, -0.400000, -0.380000, -0.590000, -0.700000, -0.820000, -0.970000, -1.010000, -1.070000, -0.790000, -0.410000, -0.250000, -0.090000, -0.120000, 0.030000, 0.070000, 0.140000, 0.280000, 0.490000, 0.710000, 0.870000, 1.070000, 1.220000, 1.310000, 1.310000, 1.360000, 1.420000, 1.410000, 1.440000, 1.470000, 1.440000, 1.400000, 1.290000, 1.140000, 1.040000, 0.910000, 0.840000, 0.790000, 0.740000, 0.700000, 0.390000, -0.160000]
        let arr33 = [-0.290000, -0.230000, -0.170000, -0.050000, 0.100000, 0.240000, 0.350000, 0.390000, 0.390000, 0.420000, 0.270000, 0.140000, 0.120000, 0.060000, -0.020000, -0.060000, 0.010000, 0.040000, -0.060000, -0.150000, -0.220000, -0.350000, -0.510000, -0.650000, -0.820000, -0.900000, -0.980000, -1.150000, -1.320000, -1.430000, -1.660000, -2.010000, -2.000000, -1.800000, -1.580000, -1.500000, -1.530000, -1.530000, -1.540000, -1.520000, -1.530000, -1.520000, -1.560000, -1.590000, -1.540000, -1.460000, -1.320000, -1.260000, -1.280000, -1.420000, -1.730000, -2.210000, -2.790000, -3.520000, -4.680000, -6.100000, -7.640000, -9.030000, -9.860000, -10.550000, -8.080000, -6.170000, -2.400000, -0.360000, 0.100000, -0.100000, 1.310000, 4.190000, 6.950000, 6.910000, 7.330000, 6.630000, 5.860000, 4.890000, 3.640000, 1.690000, 0.880000, -0.200000, -1.110000, -1.760000, -2.220000, -2.490000, -2.700000, -2.870000, -3.190000, -3.680000, -4.060000, -4.340000, -4.440000, -4.500000, -4.540000, -4.560000, -4.450000, -4.450000, -4.550000, -4.480000, -4.450000, -4.330000, -4.110000, -3.870000, -3.570000, -3.310000, -2.980000, -2.730000, -2.460000, -2.300000, -2.090000, -2.000000, -1.870000, -1.710000, -1.590000, -1.420000, -1.260000, -1.110000, -1.000000, -0.870000, -0.740000, -0.700000, -0.380000, -0.250000]
        
        let arr44 = [-0.020000, 0.020000, 0.000000, -0.030000, -0.050000, -0.090000, -0.180000, -0.310000, -0.400000, -0.540000, -0.690000, -0.850000, -0.920000, -0.910000, -0.890000, -0.850000, -0.680000, -0.590000, -0.550000, -0.530000, -0.500000, -0.500000, -0.500000, -0.470000, -0.450000, -0.420000, -0.360000, -0.250000, -0.200000, -0.180000, -0.140000, -0.240000, -0.290000, -0.160000, -0.090000, 0.000000, 0.040000, 0.050000, 0.070000, 0.070000, 0.060000, -0.010000, -0.110000, -0.100000, -0.040000, -0.130000, -0.240000, -0.350000, -0.430000, -0.650000, -0.980000, -1.310000, -1.610000, -2.070000, -3.130000, -5.040000, -6.790000, -9.010000, -10.610000, -10.910000, -9.960000, -9.880000, -8.480000, -7.160000, -5.490000, -4.560000, -4.150000, -3.550000, -2.380000, -2.140000, -1.950000, -1.770000, -1.710000, -1.190000, -1.590000, -1.430000, -1.220000, -1.020000, -1.060000, -0.870000, -0.640000, -0.460000, -0.420000, -0.330000, -0.310000, -0.330000, -0.270000, -0.360000, -0.240000, -0.040000, 0.010000, 0.060000, 0.120000, 0.200000, 0.200000, 0.160000, 0.210000, 0.220000, 0.190000, 0.160000, 0.160000, 0.090000, 0.000000, -0.090000, -0.190000, -0.310000, -0.330000, -0.300000, -0.330000, -0.320000, -0.300000, -0.280000, -0.250000, -0.190000, -0.150000, -0.150000, -0.150000, -0.190000, -0.270000, -0.280000]
        let arr55 = [0.520000, 0.470000, 0.440000, 0.430000, 0.420000, 0.490000, 0.610000, 0.730000, 0.830000, 0.960000, 1.080000, 1.190000, 1.200000, 1.190000, 1.130000, 1.020000, 0.940000, 0.790000, 0.680000, 0.590000, 0.530000, 0.520000, 0.480000, 0.490000, 0.490000, 0.510000, 0.560000, 0.570000, 0.610000, 0.720000, 0.820000, 0.820000, 0.900000, 0.890000, 0.900000, 0.850000, 0.780000, 0.810000, 0.840000, 0.910000, 0.850000, 0.830000, 0.880000, 0.890000, 0.900000, 0.930000, 0.840000, 0.840000, 0.730000, 0.670000, 0.520000, 0.360000, -0.050000, -0.620000, -0.660000, -0.750000, -0.980000, -0.930000, -0.400000, 0.530000, -0.470000, 1.200000, 2.830000, 1.920000, 0.070000, -0.800000, -0.280000, -0.150000, -0.350000, 0.050000, 0.460000, 0.320000, -0.530000, -1.280000, -1.010000, -1.420000, -1.130000, -0.960000, -0.620000, -0.450000, -0.150000, 0.060000, 0.140000, 0.140000, 0.240000, 0.440000, 0.490000, 0.860000, 0.990000, 1.150000, 1.350000, 1.330000, 1.330000, 1.350000, 1.300000, 1.220000, 1.090000, 1.080000, 1.030000, 0.990000, 0.900000, 0.850000, 0.920000, 1.020000, 1.050000, 1.100000, 1.180000, 1.200000, 1.220000, 1.250000, 1.210000, 1.150000, 1.030000, 0.910000, 0.800000, 0.720000, 0.700000, 0.790000, 0.780000, 0.750000]
        let arr66 = [-0.320000, -0.310000, -0.330000, -0.360000, -0.390000, -0.440000, -0.490000, -0.570000, -0.640000, -0.750000, -0.800000, -0.880000, -0.900000, -0.960000, -1.010000, -0.970000, -0.910000, -0.850000, -0.770000, -0.700000, -0.630000, -0.580000, -0.520000, -0.440000, -0.360000, -0.320000, -0.310000, -0.350000, -0.410000, -0.420000, -0.360000, -0.250000, -0.180000, -0.180000, -0.210000, -0.130000, -0.100000, -0.090000, -0.060000, -0.010000, 0.060000, 0.120000, 0.190000, 0.310000, 0.450000, 0.580000, 0.770000, 0.940000, 1.190000, 1.480000, 1.890000, 2.390000, 3.100000, 4.240000, 5.640000, 6.430000, 5.800000, 4.810000, 3.820000, 3.060000, 5.020000, 1.930000, 0.390000, 0.720000, 1.070000, 1.290000, 1.450000, 0.800000, 0.020000, -0.480000, -0.870000, -0.700000, -0.190000, -0.080000, -0.130000, -0.700000, -0.480000, -0.370000, -0.520000, -0.850000, -0.800000, -0.730000, -0.860000, -0.750000, -0.950000, -1.040000, -1.190000, -1.390000, -1.090000, -1.050000, -0.960000, -0.830000, -0.840000, -0.830000, -0.770000, -0.730000, -0.680000, -0.620000, -0.550000, -0.620000, -0.490000, -0.410000, -0.430000, -0.470000, -0.520000, -0.520000, -0.630000, -0.640000, -0.630000, -0.630000, -0.610000, -0.600000, -0.570000, -0.510000, -0.450000, -0.420000, -0.370000, -0.350000, -0.380000, -0.210000]
        
        for i in (0...arr1.count-1) {
            consistency_gyro_X[i] = arr1[i]-Float(arr11[i])
            consistency_gyro_Y[i] = arr2[i]-Float(arr22[i])
            consistency_gyro_Z[i] = arr3[i]-Float(arr33[i])
            
            consistency_acc_X[i] = arr4[i]-Float(arr44[i])
            consistency_acc_Y[i] = arr5[i]-Float(arr55[i])
            consistency_acc_Z[i] = arr6[i]-Float(arr66[i])
        }
        
        let avg_gyro_X = consistency_gyro_X.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        let avg_gyro_Y = consistency_gyro_Y.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        let avg_gyro_Z = consistency_gyro_Z.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        
        let avg_acc_X = consistency_acc_X.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        let avg_acc_Y = consistency_acc_Y.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        let avg_acc_Z = consistency_acc_Z.reduce(0, {Float($0 + $1)}) / Float(consistency_gyro_X.count)
        
        let overall_mean = (avg_gyro_X+avg_gyro_Y+avg_gyro_Z+avg_acc_X+avg_acc_Y+avg_acc_Z)/6
        
//        var stroke_color = 0
//        if overall_mean < 0.4 {
//            stroke_color = 4
//        }
//        if (overall_mean < 0.7) && (overall_mean >= 0.4) {
//            stroke_color = 3
//        }
//        if (overall_mean < 1) && (overall_mean >= 0.7) {
//            stroke_color = 2
//        }
//        if (overall_mean >= 1) {
//            stroke_color = 1
//        }
//
//        return [overall_mean, Float(stroke_color)]
        return overall_mean
    }
    
    func mapping(label: Int) -> String {
        
        var word_label = ""
        
        if label == 0{
            word_label = "ERROR"
        }
        
        if label == 1{
            word_label = "Forehand"
        }
        
        if label == 2{
            word_label = "Backhand"
        }
        
        if label == 3{
            word_label = "Serve"
        }
        
        if label == 4{
            word_label = "Forehand Volley"
        }
        
        if label == 5{
            word_label = "Backhand Volley"
        }
        
        return word_label
    }
    
    func hit_miss(arr1: inout [Float], output_classification: Int) -> String {
        
        var label = "-"

        //find the 2 largest peaks
        let firstMax = Float(arr1.max()!)
        
        let arr2 = arr1.filter(){$0 != firstMax}
        let secondMax = Float(arr2.max()!)
        
        let minimum = Float(arr1.min()!)
        
        //find the indexes of the maximum and minimum
        let i_firstMax = Float(arr1.firstIndex(where: {$0 == firstMax})!)
        let i_secondMax = Float(arr1.firstIndex(where: {$0 == secondMax})!)
        
        let i_minimum = Float(arr1.firstIndex(where: {$0 == minimum})!)
        
        let SMS = (firstMax-secondMax)/(i_firstMax-i_secondMax)
        let DMS = i_firstMax-i_minimum
        
        if output_classification == 1 {
            //if condition for thresholding
            if (SMS > 0) && (DMS > 5) {
                label = "Miss"
            }
            
            else {
                label = "Hit"
            }
        }
        //if condition for thresholding
        else if output_classification == 2 {
            //if condition for thresholding
            if (SMS > -0.3) && (DMS > -19) {
                label = "Miss"
            }
            
            else {
                label = "Hit"
            }
        }
        
        else {
            label = "N/A"
        }
        
        return label
    }
    
    func follow_through(arr: [Float], output_classification: Int) -> String {
        var label = "-"
        
        let new_array = Array(arr[arr.count-40...arr.count-1])
        
        let length = Float(new_array.count)
        
        
        let avg = new_array.reduce(0, {$0 + $1})/length
        let area = traps(arr: new_array)
        
        if output_classification == 1 {
            if (avg > -0.99) && (area > -40.01) {
                label = "Inconsistent"
            }
            else {
                label = "Consistent"
            }
        }
        
        else if output_classification == 2 {
            if (avg > -0.71) && (area > -29.18) {
                label = "Inconsistent"
            }
            else {
                label = "Consistent"
            }
        }
        
        else {
            label = "N/A"
        }
        
        return label
    }
}


